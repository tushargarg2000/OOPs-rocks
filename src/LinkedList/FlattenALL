import java.util.*;

// Java program for flattening a Linked List
public class Main {

  /* Linked list Node*/
  static class Node {

    int data;
    Node right, down;

    Node(int data) {
      this.data = data;
      right = null;
      down = null;
    }
  }

	static Node merge(Node a,Node b){

		if(a==null)
			return b;
		if(b==null)
			return a;

		Node result = null;

		if(a.data<=b.data){
			result=a;
			result.down  = merge(a.down,b);
		}else{
			result= b;
			result.down = merge(a,b.down);
		}

		result.right = null;
		return result;
	}

  static Node flatten(Node root) {
    // your code here

	  //Base condition
	  if(root==null || root.right==null){
		  return root;
	  }

	  Node temp = flatten(root.right);

	  //bottom up approach :
	  root = merge(root,temp);

	  return root;
  }

static void printList(Node head) {
    // your code here

	Node node = head;

	while(node!=null){
		System.out.print(node.data+" ");
		node = node.down;
	}
	System.out.println();
  }

  public static boolean isCorrect(Node claim) {
    if (claim.right != null) return false;
    Node copy = claim;
    while (copy.down != null) {
      if (copy.down.data < copy.data) return false;
      copy = copy.down;
    }
    return true;
  }

  // Driver's code
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    Node ll = new Node(-1), prev1 = null, head = ll;
    for (int i = 0; i < n; i++) {
      int k = sc.nextInt();
      Node prev2 = null, copy = ll;
      while (k-- != 0) {
        int val = sc.nextInt();
        copy.data = val;
        copy.down = new Node(-1);
        prev2 = copy;
        copy = copy.down;
      }
      prev2.down = null;
      ll.right = new Node(-1);
      prev1 = ll;
      ll = ll.right;
    }
    sc.close();
    prev1.right = null;
    Node flattenedNode = flatten(head);
    printList(flattenedNode);
    if (isCorrect(flattenedNode)) System.out.println(
      "yes"
    ); else System.out.println("no");
  }
}