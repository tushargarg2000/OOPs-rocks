import java.util.*;

class Node {
    int val;
    Node prev;
    Node next;
    Node(int val) {
        this.val = val;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    Node head;
    Node tail;
    int length;

    DoublyLinkedList() {
        this.head = null;
        this.tail = null;
        this.length = 0;
    }

    void append(int val) {
        Node newNode = new Node(val);
        if (this.length == 0) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail.next = newNode;
            newNode.prev = this.tail;
            this.tail = newNode;
        }
        this.length++;
    }

    void prepend(int val) {
        Node newNode = new Node(val);
        if (this.length == 0) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.head.prev = newNode;
            newNode.next = this.head;
            this.head = newNode;
        }
        this.length++;
    }

    void delete(Node node) {
        // Write your code here

		//If there is only one node
		if(node.next==null && node.prev==null){
			head = null;
			tail = null;
			length = length -1;
			return;
		}


		//if its first Node
		if(node.prev==null){
			//We are at the firstNode
			head = head.next;
			head.prev = null;
			return;
		}

		//if its lastNode
		if(node.next==null){

			tail = tail.prev;
			tail.next= null;
			return;
		}


		//normal Scenario
		Node nextNode = node.next;
		Node prevNode = node.prev;

		prevNode.next = nextNode;
		nextNode.prev = prevNode;

		length = length-1;
    }

    void printList() {
        Node curr = this.head;
        while (curr != null) {
            System.out.print(curr.val + " ");
            curr = curr.next;
        }
        System.out.println();
    }
}

class Solution{
    public static DoublyLinkedList deleteNodeWithX(DoublyLinkedList linkedList, int x){
        //Write your code here

		Node head = linkedList.head;

		Node node = head;
		while(node!=null){

			if(node.val==x){
				linkedList.delete(node);
			}
			node = node.next;
		}
		return linkedList;


    }
}
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N= sc.nextInt();
        int M= sc.nextInt();
        DoublyLinkedList linkedList = new DoublyLinkedList();
        for(int i=0; i<N; i++){
            linkedList.append(sc.nextInt());
        }
        Solution Obj = new Solution();
        linkedList = Obj.deleteNodeWithX(linkedList,M);
        linkedList.printList();

    }
}