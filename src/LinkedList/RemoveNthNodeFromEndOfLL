import java.io.*;
import java.util.*;
class Node
    {
        int data;
        Node next;
        Node(int d) {data = d; next = null; }
    }
class insertion
{
    Node head;
    Node tail;
	public void addToTheLast(Node node)
	{
	  if (head == null)
	  {
	   head = node;
	   tail = node;
	  }
	  else
	  {
	   tail.next = node;
	   tail = node;
	  }
	}
      void printList(Node head)
    {
        Node temp = head;
        while (temp != null)
        {
           System.out.print(temp.data+" ");
           temp = temp.next;
        }
        System.out.println();
    }
	/* Drier program to test above functions */

}
class Main
{
    public static void main(String args[])throws IOException
    {
         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

            String S[] = br.readLine().split(" ");
			int N = Integer.parseInt(S[0]);
            int n = Integer.parseInt(S[1]);


		    String S1[] = br.readLine().split(" ");
			insertion llist = new insertion();
			int a1=Integer.parseInt(S1[0]);
			Node head= new Node(a1);
            llist.addToTheLast(head);
            for (int i = 1; i < N; i++)
			{
				int a = Integer.parseInt(S1[i]);
				llist.addToTheLast(new Node(a));
			}

        Solution ob = new Solution();
		Node newhead=ob.removeNthFromEnd(llist.head, n);
		llist.printList(newhead);
    }
}

class Solution
{
    public static Node removeNthFromEnd(Node head, int posFromEnd) {
    //Write your code here

	//Calculate the size of the LinkedList

	int count = 0;

	Node node = head;

		while(node!=null)
			{
				node = node.next;
				count++;
			}
	int length = count;



	int posFromStart = length - posFromEnd;

		//System.out.println("Printing values"+length + " -"+posFromEnd+"--"+posFromStart);


		if(posFromStart==0){
			head = head.next;
			return head;
		}

	int steps = posFromStart-1;

		node = head;

		while(steps>0){
			node = node.next;
			steps--;
		}


		//System.out.println("The node we have reached is "+node.data);
		//Reached to the node 1 before the node to be deleted :

		node.next = node.next.next;

		return head;
}
}

