import java.util.*;

class Solution {

	public static Node mergeSortedLL(Node a,Node b){

		//Base conditions
		if(a==null)
			return b;

		if(b==null)
			return a;

		Node currNode = null;

		if(a.data<=b.data){
			currNode = a;
			currNode.next = mergeSortedLL(a.next,b);
		}else{
			currNode = b;
			currNode.next = mergeSortedLL(a,b.next);
		}
		return currNode;
	}
	public static Node findMiddleNode(Node head){

		Node fast = head;
		Node slow = head;
		Node prevSlow = null;

		while(fast!=null && fast.next!=null){
			prevSlow = slow;
			slow = slow.next;
			fast = fast.next.next;
		}
		return prevSlow;
	}
    public static Node mergesort(Node head){



		//Base condition
		if(head.next==null){//Cover the case of only 1 node
			return head;
		}
		Node middleNode = findMiddleNode(head);

		Node nextMiddleNode = middleNode.next;

		middleNode.next = null; //breaking this ll into 2 halves

		Node left = mergesort(head);
		Node right = mergesort(nextMiddleNode);

		return mergeSortedLL(left,right);
    }
}


class Node{
    int data;
    Node next = null;
    Node(int data){
        this.data = data;
        next = null;
    }
}
class LinkedList{
    Node head;
    void add(int data){
        Node new_node = new Node(data);
        if(head == null){
            head = new_node;
            return;
        }
        Node curr = head;
        while(curr.next != null)
            curr = curr.next;
        curr.next = new_node;
    }
}
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        LinkedList a = new LinkedList();
        for(int i = 0; i < n; i++){
            a.add(input.nextInt());
        }
        Solution Obj = new Solution();
        a.head = Obj.mergesort(a.head);
        Node h = a.head;
        while(h != null){
            System.out.print(h.data + " ");
            h = h.next;
        }
    }
}
